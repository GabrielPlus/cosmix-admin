generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ------------------- USERS -------------------
model User {
  id         String     @id @default(uuid())
  clerkId    String     @unique
  email      String     @unique
  name       String?

  bookings   Booking[]
  stores     Store[]     // A user can own multiple stores
  saloons    Saloon[]    // A user can own multiple saloons
  reviews    SaloonReview[]

  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  @@map("users")
}

// ------------------- STORE -------------------
model Store {
  id           String        @id @default(uuid())
  name         String
  userId       String
  description  String?
  shortIntro   String?
  images       Image[]
  rating       Float         @default(0.0)
  address      String?

  user         User          @relation(fields: [userId], references: [id])
  categories   Category[]    // Categories are tied to stores
  storeServices StoreService[]
  bookings     Booking[]
  saloons      Saloon[]      // ðŸ‘ˆ relation to saloons

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("stores")
  @@index([userId])
}

// ------------------- SALOON -------------------
model Saloon {
  id             String         @id @default(uuid())
  name           String
  userId         String
  storeId        String         // ðŸ‘ˆ new field
  description    String?
  shortIntro     String?
  images         SaloonImage[]
  rating         Float          @default(0.0)
  address        String?

  user           User           @relation(fields: [userId], references: [id])
  store          Store          @relation(fields: [storeId], references: [id], onDelete: Cascade) // ðŸ‘ˆ linked to store
  saloonServices SaloonService[]
  bookings       Booking[]
  reviews        SaloonReview[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("saloons")
  @@index([userId])
  @@index([storeId]) // ðŸ‘ˆ added for queries
}

// ------------------- IMAGES -------------------
model Image {
  id         String   @id @default(uuid())
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id], onDelete: Cascade)
  url        String   // Cloudinary URL

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([storeId])
}

model SaloonImage {
  id         String   @id @default(uuid())
  saloonId   String
  saloon     Saloon   @relation(fields: [saloonId], references: [id], onDelete: Cascade)
  url        String

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("saloon_images")
  @@index([saloonId])
}

// ------------------- CATEGORY -------------------
model Category {
  id          String    @id @default(uuid())
  storeId     String
  store       Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  name        String
  
  services    Service[]

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([storeId, name]) // Unique per store
  @@map("categories")
}

// ------------------- STORE â†” SERVICE -------------------
model StoreService {
  storeId    String
  store      Store    @relation(fields: [storeId], references: [id])
  serviceId  String
  service    Service  @relation(fields: [serviceId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@id([storeId, serviceId])
  @@map("store_services")
}

// ------------------- SALOON â†” SERVICE -------------------
model SaloonService {
  saloonId        String
  saloon          Saloon   @relation(fields: [saloonId], references: [id])
  serviceId       String
  service         Service  @relation(fields: [serviceId], references: [id])

  price           Float
  durationMinutes Int
  isAvailable     Boolean  @default(true)

  // Available days (0 = Sunday, 1 = Monday, ..., 6 = Saturday)
  availableDays   Int[]    @default([])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@id([saloonId, serviceId])
  @@map("saloon_services")
}

// ------------------- SERVICE -------------------
model Service {
  id              String          @id @default(uuid())
  name            String
  description     String?

  categoryId      String
  category        Category        @relation(fields: [categoryId], references: [id])

  parentServiceId String?
  parentService   Service?        @relation("ServiceHierarchy", fields: [parentServiceId], references: [id], onDelete: Cascade)
  subServices     Service[]       @relation("ServiceHierarchy")

  isPopular       Boolean         @default(false)

  storeServices   StoreService[]
  saloonServices  SaloonService[]
  bookings        Booking[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("services")
}

// ------------------- BOOKING -------------------
model Booking {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id])

  serviceId    String
  service      Service  @relation(fields: [serviceId], references: [id])

  storeId      String?
  store        Store?   @relation(fields: [storeId], references: [id])

  saloonId     String?
  saloon       Saloon?  @relation(fields: [saloonId], references: [id])


  bookingTime  DateTime
  status       String   @default("pending") // pending, confirmed, cancelled, completed

  customerName  String?
  customerPhone String?
  customerEmail String?
  notes         String?
  totalAmount   Float?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
  @@index([storeId])
  @@index([saloonId])
  @@index([status])
  @@index([bookingTime])
}

// ------------------- SALOON REVIEWS -------------------
model SaloonReview {
  id        String   @id @default(uuid())
  saloonId  String
  saloon    Saloon   @relation(fields: [saloonId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  rating    Int      // 1..5
  comment   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([saloonId])
  @@index([userId])
  @@map("saloon_reviews")
}
